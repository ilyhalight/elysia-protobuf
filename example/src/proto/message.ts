// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.4
//   protoc               v3.21.9
// source: proto/message.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export enum ResponseStatus {
  OK = 0,
  SOME = 1,
  UNRECOGNIZED = -1,
}

export function responseStatusFromJSON(object: any): ResponseStatus {
  switch (object) {
    case 0:
    case "OK":
      return ResponseStatus.OK;
    case 1:
    case "SOME":
      return ResponseStatus.SOME;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ResponseStatus.UNRECOGNIZED;
  }
}

export function responseStatusToJSON(object: ResponseStatus): string {
  switch (object) {
    case ResponseStatus.OK:
      return "OK";
    case ResponseStatus.SOME:
      return "SOME";
    case ResponseStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface RequestMessage {
  title: string;
  updatedAt?: number | undefined;
  tags: string[];
}

export interface ResponseMessage {
  status: ResponseStatus;
  inlineTags: string;
}

function createBaseRequestMessage(): RequestMessage {
  return { title: "", updatedAt: undefined, tags: [] };
}

export const RequestMessage: MessageFns<RequestMessage> = {
  encode(
    message: RequestMessage,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.updatedAt !== undefined) {
      writer.uint32(16).int32(message.updatedAt);
    }
    for (const v of message.tags) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestMessage {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.updatedAt = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestMessage {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      updatedAt: isSet(object.updatedAt)
        ? globalThis.Number(object.updatedAt)
        : undefined,
      tags: globalThis.Array.isArray(object?.tags)
        ? object.tags.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: RequestMessage): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = Math.round(message.updatedAt);
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestMessage>, I>>(
    base?: I,
  ): RequestMessage {
    return RequestMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestMessage>, I>>(
    object: I,
  ): RequestMessage {
    const message = createBaseRequestMessage();
    message.title = object.title ?? "";
    message.updatedAt = object.updatedAt ?? undefined;
    message.tags = object.tags?.map((e) => e) || [];
    return message;
  },
};

function createBaseResponseMessage(): ResponseMessage {
  return { status: 0, inlineTags: "" };
}

export const ResponseMessage: MessageFns<ResponseMessage> = {
  encode(
    message: ResponseMessage,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    if (message.inlineTags !== "") {
      writer.uint32(18).string(message.inlineTags);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseMessage {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.inlineTags = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseMessage {
    return {
      status: isSet(object.status) ? responseStatusFromJSON(object.status) : 0,
      inlineTags: isSet(object.inlineTags)
        ? globalThis.String(object.inlineTags)
        : "",
    };
  },

  toJSON(message: ResponseMessage): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = responseStatusToJSON(message.status);
    }
    if (message.inlineTags !== "") {
      obj.inlineTags = message.inlineTags;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResponseMessage>, I>>(
    base?: I,
  ): ResponseMessage {
    return ResponseMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResponseMessage>, I>>(
    object: I,
  ): ResponseMessage {
    const message = createBaseResponseMessage();
    message.status = object.status ?? 0;
    message.inlineTags = object.inlineTags ?? "";
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
